<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper 
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.domi.mapper.loanmarket.LoanPlatformMapper">
	<insert id="insert" parameterType="LoanPlatform" useGeneratedKeys="true" keyProperty="id">
		insert into loan_platform(name, platformDesc, logo, minMoney, maxMoney, dayRange, monthRange, monthRatio, applyDesc, requireDesc, applyPoint, userRole, userMaterial, userUsage, userCount, 
		beOnline, subscribeTime, hasSubscribe, isTop, platformState, state, addTime, updatetime, offlineTime, platformUrl, passRatio, labels, orderNo)
		values(#{name}, #{platformDesc}, #{logo}, #{minMoney}, #{maxMoney}, #{dayRange}, #{monthRange}, #{monthRatio}, #{applyDesc}, #{applyDesc}, #{applyPoint}, #{userRole}, #{userMaterial}, #{userUsage}, #{userCount}, 
		#{beOnline}, #{subscribeTime}, #{hasSubscribe}, #{isTop}, #{platformState}, #{state}, #{addTime}, #{updatetime}, #{offlineTime}, #{platformUrl}, #{passRatio}, #{labels}, #{orderNo})
	</insert>
	
 
 	<insert id="insertSafeCall" parameterType="SafeCall">
 		insert into safe_call(userId, requestInfo,responseInfo, addTime, errCode) values(
 			#{userId}, #{requestInfo}, #{responseInfo}, #{addTime}, #{errCode}
 		)
 	
 	</insert>
 
	
	
	<update id="update" parameterType="LoanPlatform">
		update loan_platform set name=#{name}, platformDesc=#{platformDesc}, logo=#{logo}, minMoney=#{minMoney}, maxMoney=#{maxMoney}, dayRange=#{dayRange}, 
		monthRange=#{monthRange}, monthRatio=#{monthRatio}, applyDesc=#{applyDesc}, requireDesc=#{applyDesc}, applyPoint=#{applyPoint}, userRole=#{userRole}, 
		userMaterial=#{userMaterial}, userUsage=#{userUsage}, userCount=#{userCount}, beOnline=#{beOnline}, subscribeTime=#{subscribeTime}, hasSubscribe=#{hasSubscribe},
		isTop=#{isTop}, platformState=#{platformState}, state=#{state}, addTime=#{addTime}, updatetime=#{updatetime}, offlineTime=#{offlineTime},platformUrl=#{platformUrl},
		passRatio=#{passRatio}, labels=#{labels}, orderNo=#{orderNo} where id=#{id}
	</update>
	
	<select id="queryById" parameterType="int" resultType="LoanPlatform">
		select * from loan_platform where id=#{id}
	</select>
	
	<select id="queryListByParam" parameterType="map" resultType="LoanPlatform">
		select t1.*, t2.settleRule, t2.settleDate from loan_platform t1 
		left join platform_info t2
		on t1.id=t2.loanPlatformId
		where t1.state=#{state} order by t1.id desc limit #{start},#{length}
	</select>
	<select id="querySizeByParam" parameterType="map" resultType="int">
		select count(1) from loan_platform where state=#{state};
	</select>
	
	<select id="queryToBeOnlineList" resultType="LoanPlatform">
		select * from loan_platform where state=0 and hasSubscribe=0 and subscribeTime is not null;
	</select>
	<update id="updateState" parameterType="LoanPlatform">
		update loan_platform set state=#{state}, hasSubscribe=#{hasSubscribe}, updatetime=now() where id=#{id}
	</update>
	
	
	<!-- app -->
	<select id="queryListByPlatformState" parameterType="map" resultType="AppLoanPlatformDto">
		select id, name, platformDesc, logo, minMoney, maxMoney, userCount, monthRatio, isTop, platformState, dayRange, monthRange,passRatio passRaitio,labels
		from loan_platform 
		where state=1 order by orderNo , id desc limit #{pageIndex},#{pageSize}
	</select>
	
	<select id="queryListByPlatformStateForTwo" parameterType="map" resultType="AppLoanPlatformDto">
		select id, name, platformDesc, logo, minMoney, maxMoney, userCount, monthRatio, isTop, platformState, dayRange, monthRange,passRatio passRaitio,labels
		from loan_platform 
		where state=1 and platformState=#{platformState} 
		order by orderNo, id desc limit 2
	</select>
	
	<select id="queryAllNames" resultType="String">
		select name from loan_platform where state=1
	</select>
	
	<select id="queryListByAppParam" parameterType="map" resultType="LoanPlatform">
		select id, name, platformDesc, logo, minMoney, maxMoney, userCount, monthRatio, isTop, platformState
		from loan_platform 
		where state=1
		<if test="minMoney!=null and maxMoney!=null">
			<![CDATA[and maxMoney>=#{minMoney} and maxMoney<#{maxMoney}]]>
		</if>
		<if test="minMoney!=null and maxMoney==null">
			<![CDATA[and maxMoney>=#{minMoney}]]>
		</if>
		<if test="platformState!=null">and platformState=#{platformState}</if>
		<if test="userRole">and userRole=#{userRole}</if>
		<if test="userMaterials!=null">
			and
			<foreach collection="userMaterials" item="userMaterial"  open="(" separator=" or " close=")">
				userMaterial like "%"#{userMaterial}"%"
			</foreach>
		</if>
		<if test="userUsages!=null">
			and
			<foreach collection="userUsages" item="userUsage"  open="(" separator=" or " close=")">
				userUsage like "%"#{userUsage}"%"
			</foreach>
		</if>
		order by isTop desc
		<if test="ratioRate!=null">,monthRatio</if>
		<if test="moneyRate!=null">,maxMoney desc</if>
		<if test="ratioRate==null and moneyRate==null">,id desc</if>
		limit #{start},#{length}
	</select>
		
	<select id="queryPlatformData" parameterType="Map" resultType="LoanPlatformData">
		SELECT id, name, logo, IFNULL(clickPeopleCount,0) clickPeopleCount, IFNULL(clickCount,0) clickCount, 
		IFNULL(registerPeopleCount,0) registerPeopleCount,  IFNULL(registerCount,0) registerCount  FROM 
		(SELECT id, name, logo FROM loan_platform WHERE state=#{state})x
		LEFT JOIN
		(
			SELECT platformId, COUNT(*) clickPeopleCount, IFNULL(SUM(clickCount),0) clickCount  FROM 
			(SELECT platformId, userId, COUNT(*) clickCount FROM   visit_history_info WHERE type=0 AND DATE(visitTime) BETWEEN #{beginDate} AND #{endDate} GROUP BY platformId, userId)x
			GROUP BY platformId
		)x1 ON x.id=x1.platformId
		LEFT JOIN
		(
			SELECT platformId, COUNT(*) registerPeopleCount, IFNULL(SUM(registerCount),0) registerCount FROM 
			(SELECT platformId, userId, COUNT(*) registerCount FROM   visit_history_info WHERE type=1 AND DATE(visitTime) BETWEEN #{beginDate} AND #{endDate} GROUP BY platformId, userId)x
			GROUP BY platformId
		)x2 ON x.id=x2.platformId		
	</select>
	
	
	
	
	
	
	
	
	
	
</mapper>